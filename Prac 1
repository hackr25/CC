/*
* File name: TCPPrimeApplication.java
* This file contains both server and client code for prime number checking
* Run server with: java tcpServerPrime
* Run client with: java tcpClientPrime
*/

import java.net.*;
import java.io.*;

// Prime Number Server
class tcpServerPrime {
    public static void main(String args[]) {
        try {
            ServerSocket ss = new ServerSocket(8001);
            System.out.println("Server Started............");
            Socket s = ss.accept();
            
            DataInputStream in = new DataInputStream(s.getInputStream());
            int x = in.readInt();
            
            DataOutputStream otc = new DataOutputStream(s.getOutputStream());
            int y = x/2;
            
            if(x == 1 || x == 2 || x == 3) {
                otc.writeUTF(x + " is Prime");
                System.exit(0);
            }
            
            for(int i=2; i<=y; i++) {
                if(x%i != 0) {
                    otc.writeUTF(x + " is Prime");
                }
                else {
                    otc.writeUTF(x + " is not Prime");
                }
            }
        }
        catch(Exception e) {
            System.out.println(e.toString());
        }
    }
}

// Prime Number Client
class tcpClientPrime {
    public static void main(String args[]) {
        try {
            Socket cs = new Socket("LocalHost", 8001);
            BufferedReader infu = new BufferedReader(new InputStreamReader(System.in));
            
            System.out.println("Enter a number : ");
            int a = Integer.parseInt(infu.readLine());
            
            DataOutputStream out = new DataOutputStream(cs.getOutputStream());
            out.writeInt(a);
            
            DataInputStream in = new DataInputStream(cs.getInputStream());
            System.out.println(in.readUTF());
            cs.close();
        }
        catch(Exception e) {
            System.out.println(e.toString());
        }
    }
}


Practical 1B
// Chat Server
import java.net.*;
import java.io.*;

class ChatServer {
    public static void main(String args[]) {
        try {
            ServerSocket ss = new ServerSocket(8000);
            System.out.println("Waiting for client to connect..");
            Socket s = ss.accept();
            
            // Use BufferedReader for input stream
            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
            PrintWriter out = new PrintWriter(s.getOutputStream(), true);
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            
            String receive, send;
            while((receive = in.readLine()) != null) {
                if(receive.equals("STOP"))
                    break;
                    
                System.out.println("Client Says : " + receive);
                System.out.print("Server Says : ");
                send = br.readLine();
                out.println(send);  // Using println() for automatic line ending
            }
            
            // Close resources
            br.close();
            in.close();
            out.close();
            s.close();
            ss.close();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
}

//Chat Client
import java.net.*;
import java.io.*;

class ChatClient {
    public static void main(String args[]) {
        try {
            Socket s = new Socket("localhost", 8000);  // lowercase 'localhost'
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            PrintWriter out = new PrintWriter(s.getOutputStream(), true);
            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
            
            String msg;
            System.out.println("To stop chatting with server type STOP");
            System.out.print("Client Says: ");
            
            while((msg = br.readLine()) != null) {
                out.println(msg);  // Use println() instead of writeBytes()
                
                if(msg.equals("STOP"))
                    break;
                    
                System.out.println("Server Says : " + in.readLine());
                System.out.print("Client Says : ");
            }
            
            // Close resources
            br.close();
            in.close();
            out.close();
            s.close();
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
}

