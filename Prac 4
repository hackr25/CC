# Practical 4: JAX-WS Web Services Implementation Guide

## Q1: JAX-WS Web Service with Servlet/JSP Consumer

### Step 1: Create a new web application project
- Click on "Web Application" for the project type
- Enter project name
- Click Next, then Finish

### Step 2: Create a new web service
- Expand project in the project explorer
- Right-click on project, select "New Web Service"
- Enter "operation" as the name of the web service
- Enter "com.kk" as the package name
- Click Finish

### Step 3: Modify Operation.java
- Remove the default/template code from Operation.java

### Step 4: Test web service configuration
- Expand project in project palette
- Go to "Web Services" > "Operation"
- Right-click on web service and select "Test Web Service"

### Step 5: Add Addition operation
- Add new operation named "Add" with return type integer
- Add two parameters:
  - Parameter name: "a", type: integer
  - Parameter name: "b", type: integer
- Click OK

### Step 6: Implement Addition method
```java
int c = a+b;
return c;
```

### Step 7: Add more operations
- Repeat step 4 & 5 to create Subtraction, Multiplication, and Division operations

### Step 8: Implement remaining methods
**Subtraction method:**
```java
int c = a-b;
return c;
```

**Multiplication method:**
```java
int c = a*b;
return c;
```

**Division method:**
```java
int c = a/b;
return c;
```

### Step 9: Test web service

### Step 10: Create JSP page
- Right-click on project
- Select "New JSP page"
- Enter file name
- Click Finish

### Step 11: Write JSP code to consume web service
```jsp
<%
com.kk.Operation a1 = new com.kk.Operation();
int d = a1.Add(3, 6);
int e = a1.Sub(45, 26);
int f = a1.Multi(23, 3);
int g = a1.Div(64, 6);
out.println("Addition of two numbers is: "+d+"<br>");
out.println("Subtraction of two numbers is: "+e+"<br>");
out.println("Multiplication of two numbers is: "+f+"<br>");
out.println("Division of two numbers is: "+g+"<br>");
%>
```

### Step 12: Run JSP page
- Right-click on JSP page
- Select "Run file"

## Q2: JAX-WS Web Service Server & Client

### Step 1: Create a new web application project
- Click on "Java Web" > "Web Application"

### Step 2: Create a new web service
- Right-click on newly created project
- Create new web service with:
  - Service name: "MyWebServices"
  - Package name: "rc.com"

### Step 3: Modify MyWebService.java
- Remove the default template content

### Step 4: Add Square method to web service
```java
@WebMethod(operationName = "Square")
public double square(double val) {
    return val*val;
}
```

### Step 5: Run index.html
- Right-click on index.html in project
- Click "Run file"

### Step 6: Remove selected part from link in browser

### Step 7: Access administration console
- Click on "Go to the administration console"

### Step 8: Navigate to application settings
- In left side panel, expand Application tasks
- Click on your project

### Step 9: View endpoint
- Go to "General" tab
- Scroll down to "Modules & Components" table
- Click on "View Endpoint" in action column

### Step 10: Access WSDL
- Click on "/WebServices_Using_Clients/MyWebServices?wsdl" link

### Step 11: View WSDL window opens

### Step 12: Click on first link to access server

### Step 13: Create a new Java project
- Copy the WSDL link from browser to notepad
- Minimize browser window
- Create a new Java project

### Step 14: Create a web service client
- Right-click on Java project
- Select "New" > "Web Service Client"

### Step 15: Configure web service client
- Select "WSDL URL" option
- Paste the copied WSDL link

### Step 16: Write client code in JavaApplication.java
```java
MyWebServices_Service service = new MyWebServices_Service();
final MyWebService proxy = service.getMyWebServicePort();
System.out.println(proxy.square(7));
```

### Step 17: Import service packages

### Step 18: Run the Java application project
